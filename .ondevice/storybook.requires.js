/* do not change this file, it is auto generated by storybook. */

import {
  configure,
  addDecorator,
  addParameters,
  addArgsEnhancer,
  clearDecorators,
} from '@storybook/react-native';

global.STORIES = [
  {
    titlePrefix: '',
    directory: './components',
    files: '**/*.stories.?(ts|tsx|js|jsx)',
    importPathMatcher:
      '^\\.[\\\\/](?:components(?:[\\\\/](?!\\.)(?:(?:(?!(?:^|[\\\\/])\\.).)*?)[\\\\/]|[\\\\/]|$)(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.(?:ts|tsx|js|jsx)?)$',
  },
];

import '@storybook/addon-ondevice-notes/register';
import '@storybook/addon-ondevice-controls/register';
import '@storybook/addon-ondevice-backgrounds/register';
import '@storybook/addon-ondevice-actions/register';

import {argsEnhancers} from '@storybook/addon-actions/dist/modern/preset/addArgs';

import {decorators, parameters} from './preview';

if (decorators) {
  if (__DEV__) {
    // stops the warning from showing on every HMR
    require('react-native').LogBox.ignoreLogs([
      '`clearDecorators` is deprecated and will be removed in Storybook 7.0',
    ]);
  }
  // workaround for global decorators getting infinitely applied on HMR, see https://github.com/storybookjs/react-native/issues/185
  clearDecorators();
  decorators.forEach(decorator => addDecorator(decorator));
}

if (parameters) {
  addParameters(parameters);
}

try {
  argsEnhancers.forEach(enhancer => addArgsEnhancer(enhancer));
} catch {}

const getStories = () => {
  return {
    // boxButton 컴포넌트
    './src/components/buttons/boxButton/BoxButton.stories.tsx': require('../src/components/buttons/boxButton/BoxButton.stories.tsx'),
    // chip 컴포넌트
    './src/components/chip/Chip.stories.tsx': require('../src/components/chip/Chip.stories.tsx'),
    // checkbox 컴포넌트
    './src/components/checkBox/CheckBox.stories.tsx': require('../src/components/checkBox/CheckBox.stories.tsx'),
    // switch 컴포넌트
    './src/components/switch/Switch.stories.tsx': require('../src/components/switch/Switch.stories.tsx'),
    // textInput 컴포넌트
    './src/components/textInput/TextInput.stories.tsx': require('../src/components/textInput/TextInput.stories.tsx'),
    // topBar 컴포넌트
    './src/components/topBar/subTitleTopBar/SubTitleTopBar.stories.tsx': require('../src/components/topBar/subTitleTopBar/SubTitleTopBar.stories'),
    './src/components/topBar/backTitleTopBar/BackTitleTopBar.stories.tsx': require('../src/components/topBar/backTitleTopBar/BackTitleTopBar.stories'),
    './src/components/topBar/subMenuTopBar/SubMenuTopBar.stories.tsx': require('../src/components/topBar/subMenuTopBar/SubMenuTopBar.stories.tsx'),
    './src/components/topBar/cancelTopBar/CancelTopBar.stories.tsx': require('../src/components/topBar/cancelTopBar/CancelTopBar.stories.tsx'),
    './src/components/topBar/titleTopBar/TitleTopBar.stories.tsx': require('../src/components/topBar/titleTopBar/TitleTopBar.stories.tsx'),
    './src/components/topBar/textTopBar/TextTopBar.stories.tsx': require('../src/components/topBar/textTopBar/TextTopBar.stories'),
    // BottomSheet 컴포넌트
    './src/components/bottomSheet/BottomSheet.stories.tsx': require('../src/components/bottomSheet/BottomSheet.stories.tsx'),
    // Modal 컴포넌트
    './src/components/modal/Modal.stories.tsx': require('../src/components/modal/Modal.stories.tsx'),
    // Numbering 컴포넌트
    './src/components/numbering/Numbering.stories.tsx': require('../src/components/numbering/Numbering.stories.tsx'),
  };
};

configure(getStories, module, false);
